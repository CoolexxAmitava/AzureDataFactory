{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfpractical001"
		},
		"AzureSqlDatabaseLinkedServices_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseLinkedServices'"
		},
		"AzureSynapseAnalyticsLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalyticsLinkedService'"
		},
		"linkedServiceADLS_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'linkedServiceADLS'"
		},
		"linkedServiceADLS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adls0011.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseLinkedServices')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseLinkedServices_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseAnalyticsLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalyticsLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedServiceADLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('linkedServiceADLS_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('linkedServiceADLS_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseLinkedServices",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "product_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "product_name",
						"type": "varchar"
					},
					{
						"name": "unit_price",
						"type": "float",
						"precision": 15
					},
					{
						"name": "product_desc",
						"type": "varchar"
					},
					{
						"name": "eligible_promotion",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Sync_Flag",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "product_table"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedServices')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseAnalyticsStaging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "product_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "product_name",
						"type": "varchar"
					},
					{
						"name": "unit_price",
						"type": "float",
						"precision": 15
					},
					{
						"name": "product_desc",
						"type": "varchar"
					},
					{
						"name": "eligible_promotion",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "product_dim_stg"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseAnalyticsTarget')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalyticsLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "product_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "product_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "product_name",
						"type": "varchar"
					},
					{
						"name": "unit_price",
						"type": "float",
						"precision": 15
					},
					{
						"name": "product_desc",
						"type": "varchar"
					},
					{
						"name": "eligible_promotion",
						"type": "int",
						"precision": 10
					},
					{
						"name": "start_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "end_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "active_flag",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "product_dim_trgt"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalyticsLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowSCD2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsStaging",
								"type": "DatasetReference"
							},
							"name": "sourceStage"
						},
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTarget",
								"type": "DatasetReference"
							},
							"name": "sourceTarget"
						},
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTarget",
								"type": "DatasetReference"
							},
							"name": "sourceMaxSurrogateKey"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTarget",
								"type": "DatasetReference"
							},
							"name": "InsertSink"
						},
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTarget",
								"type": "DatasetReference"
							},
							"name": "UpdateSink"
						}
					],
					"transformations": [
						{
							"name": "SurrogateKey"
						},
						{
							"name": "JoinForSurrogateKey"
						},
						{
							"name": "DerivedColumnsInsert"
						},
						{
							"name": "ExistsUpdate"
						},
						{
							"name": "DerivedColumnsUpdate"
						},
						{
							"name": "UpdateAlterRow"
						},
						{
							"name": "FilterActiveColumns"
						},
						{
							"name": "SelectOldRecordsOnly"
						}
					],
					"script": "source(output(\n\t\tproduct_id as integer,\n\t\tproduct_name as string,\n\t\tunit_price as double,\n\t\tproduct_desc as string,\n\t\teligible_promotion as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceStage\nsource(output(\n\t\tproduct_key as integer,\n\t\tproduct_id as integer,\n\t\tproduct_name as string,\n\t\tunit_price as double,\n\t\tproduct_desc as string,\n\t\teligible_promotion as integer,\n\t\tstart_date as timestamp,\n\t\tend_date as timestamp,\n\t\tactive_flag as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceTarget\nsource(output(\n\t\tMaxKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select ISNULL(max(product_key),0) as MaxKey from dbo.product_dim_trgt',\n\tformat: 'query',\n\tstaged: false) ~> sourceMaxSurrogateKey\nJoinForSurrogateKey keyGenerate(output(SurrogateKeyIncrement as long),\n\tstartAt: 1L) ~> SurrogateKey\nsourceStage, sourceMaxSurrogateKey join(true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinForSurrogateKey\nSurrogateKey derive(active_flag = 1,\n\t\tstart_date = currentTimestamp(),\n\t\tproduct_key = MaxKey+SurrogateKeyIncrement) ~> DerivedColumnsInsert\nFilterActiveColumns, sourceStage exists(sourceTarget@product_id == sourceStage@product_id,\n\tnegate:false,\n\tbroadcast: 'auto')~> ExistsUpdate\nSelectOldRecordsOnly derive(end_date = currentTimestamp(),\n\t\tactive_flag = 0) ~> DerivedColumnsUpdate\nDerivedColumnsUpdate alterRow(updateIf(true())) ~> UpdateAlterRow\nsourceTarget filter(active_flag==1) ~> FilterActiveColumns\nExistsUpdate, DerivedColumnsInsert exists(sourceTarget@product_key == DerivedColumnsInsert@product_key,\n\tnegate:true,\n\tbroadcast: 'auto')~> SelectOldRecordsOnly\nDerivedColumnsInsert sink(input(\n\t\tproduct_key as integer,\n\t\tproduct_id as integer,\n\t\tproduct_name as string,\n\t\tunit_price as double,\n\t\tproduct_desc as string,\n\t\teligible_promotion as integer,\n\t\tstart_date as timestamp,\n\t\tend_date as timestamp,\n\t\tactive_flag as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tmapColumn(\n\t\tproduct_id,\n\t\tproduct_key,\n\t\tproduct_name,\n\t\tunit_price,\n\t\tproduct_desc,\n\t\teligible_promotion,\n\t\tstart_date,\n\t\tactive_flag\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> InsertSink\nUpdateAlterRow sink(input(\n\t\tproduct_key as integer,\n\t\tproduct_id as integer,\n\t\tproduct_name as string,\n\t\tunit_price as double,\n\t\tproduct_desc as string,\n\t\teligible_promotion as integer,\n\t\tstart_date as timestamp,\n\t\tend_date as timestamp,\n\t\tactive_flag as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['product_id'],\n\tformat: 'table',\n\tstaged: true,\n\tmapColumn(\n\t\tproduct_id,\n\t\tproduct_key,\n\t\tproduct_name,\n\t\tunit_price,\n\t\tproduct_desc,\n\t\teligible_promotion,\n\t\tstart_date,\n\t\tend_date,\n\t\tactive_flag\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> UpdateSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSynapseAnalyticsStaging')]",
				"[concat(variables('factoryId'), '/datasets/AzureSynapseAnalyticsTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineSCD2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Staging",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select product_id,product_name,unit_price,product_desc,eligible_promotion from dbo.product_table where Sync_Flag=0;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": "truncate table dbo.product_dim_stg;",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "product_name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "product_name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "unit_price",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "unit_price",
											"type": "Single",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "product_desc",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "product_desc",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "eligible_promotion",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "eligible_promotion",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTableSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSynapseAnalyticsStaging",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "dataflow Process",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowSCD2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceStage": {},
									"sourceTarget": {},
									"sourceMaxSurrogateKey": {},
									"InsertSink": {},
									"UpdateSink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "linkedServiceADLS",
									"type": "LinkedServiceReference"
								},
								"folderPath": "dataadls/loadpolybaseinput"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "dataflow Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "update dbo.product_table set Sync_Flag=1;\n\nselect getdate();",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTableSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableSource')]",
				"[concat(variables('factoryId'), '/datasets/AzureSynapseAnalyticsStaging')]",
				"[concat(variables('factoryId'), '/dataflows/dataflowSCD2')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedServiceADLS')]"
			]
		}
	]
}